// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: organisation_tokens.sql

package repository

import (
	"context"
	"database/sql"
	"time"
)

const createOrganisationToken = `-- name: CreateOrganisationToken :one
INSERT INTO organisation_tokens (id, organisation_id, token, created_by, created_on_utc, modified_on_utc, modified_by)
VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7)
RETURNING id
`

type CreateOrganisationTokenParams struct {
	ID             string         `json:"id"`
	Organisationid string         `json:"organisationid"`
	Token          string         `json:"token"`
	Createdby      string         `json:"createdby"`
	Createdonutc   time.Time      `json:"createdonutc"`
	Modifiedonutc  time.Time      `json:"modifiedonutc"`
	Modifiedby     sql.NullString `json:"modifiedby"`
}

func (q *Queries) CreateOrganisationToken(ctx context.Context, arg CreateOrganisationTokenParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createOrganisationToken,
		arg.ID,
		arg.Organisationid,
		arg.Token,
		arg.Createdby,
		arg.Createdonutc,
		arg.Modifiedonutc,
		arg.Modifiedby,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getOrganisationTokens = `-- name: GetOrganisationTokens :many
SELECT id, organisation_id, token, created_by, created_on_utc, modified_on_utc, modified_by FROM organisation_tokens
WHERE organisation_id = ?1
ORDER BY id DESC
`

func (q *Queries) GetOrganisationTokens(ctx context.Context, organisationid string) ([]OrganisationToken, error) {
	rows, err := q.db.QueryContext(ctx, getOrganisationTokens, organisationid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrganisationToken{}
	for rows.Next() {
		var i OrganisationToken
		if err := rows.Scan(
			&i.ID,
			&i.OrganisationID,
			&i.Token,
			&i.CreatedBy,
			&i.CreatedOnUtc,
			&i.ModifiedOnUtc,
			&i.ModifiedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
