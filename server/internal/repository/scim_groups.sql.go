// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: scim_groups.sql

package repository

import (
	"context"
	"database/sql"
)

const createScimGroup = `-- name: CreateScimGroup :one
INSERT INTO scim_groups (id, display_name, external_id, meta_version, organisation_id)
VALUES (?1, ?2, ?3, ?4, ?5)
RETURNING id
`

type CreateScimGroupParams struct {
	ID             string         `json:"id"`
	Displayname    string         `json:"displayname"`
	Externalid     sql.NullString `json:"externalid"`
	Metaversion    sql.NullString `json:"metaversion"`
	Organisationid string         `json:"organisationid"`
}

func (q *Queries) CreateScimGroup(ctx context.Context, arg CreateScimGroupParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createScimGroup,
		arg.ID,
		arg.Displayname,
		arg.Externalid,
		arg.Metaversion,
		arg.Organisationid,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getAllScimGroups = `-- name: GetAllScimGroups :many
SELECT id, external_id, display_name, meta_resource_type, meta_created, meta_last_modified, meta_version, organisation_id FROM scim_groups
WHERE organisation_id = ?1
ORDER BY id
`

func (q *Queries) GetAllScimGroups(ctx context.Context, organisationid string) ([]ScimGroup, error) {
	rows, err := q.db.QueryContext(ctx, getAllScimGroups, organisationid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ScimGroup{}
	for rows.Next() {
		var i ScimGroup
		if err := rows.Scan(
			&i.ID,
			&i.ExternalID,
			&i.DisplayName,
			&i.MetaResourceType,
			&i.MetaCreated,
			&i.MetaLastModified,
			&i.MetaVersion,
			&i.OrganisationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
