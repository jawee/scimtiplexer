// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: scim_user_emails.sql

package repository

import (
	"context"
	"database/sql"
)

const createUserEmail = `-- name: CreateUserEmail :exec
INSERT INTO scim_user_emails (
    id,
    user_id,
    value,
    display,
    type,
    primary_email
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5,
    ?6
) ON CONFLICT (user_id, value) DO NOTHING
`

type CreateUserEmailParams struct {
	ID           string
	UserID       string
	Value        string
	Display      sql.NullString
	Type         sql.NullString
	PrimaryEmail sql.NullBool
}

func (q *Queries) CreateUserEmail(ctx context.Context, arg CreateUserEmailParams) error {
	_, err := q.db.ExecContext(ctx, createUserEmail,
		arg.ID,
		arg.UserID,
		arg.Value,
		arg.Display,
		arg.Type,
		arg.PrimaryEmail,
	)
	return err
}

const getUserEmails = `-- name: GetUserEmails :many
SELECT
    id, user_id, value, display, type, primary_email
FROM scim_user_emails
WHERE user_id = ?1
ORDER BY value
`

func (q *Queries) GetUserEmails(ctx context.Context, userID string) ([]ScimUserEmail, error) {
	rows, err := q.db.QueryContext(ctx, getUserEmails, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ScimUserEmail{}
	for rows.Next() {
		var i ScimUserEmail
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Value,
			&i.Display,
			&i.Type,
			&i.PrimaryEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
