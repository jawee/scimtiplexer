// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: scim_user_group_memberships.sql

package repository

import (
	"context"
)

const createUserGroupMembership = `-- name: CreateUserGroupMembership :exec
INSERT INTO scim_user_group_memberships (
    user_id,
    group_id
) VALUES (
    ?1,
    ?2
) ON CONFLICT (user_id, group_id) DO NOTHING
`

type CreateUserGroupMembershipParams struct {
	UserID  string
	GroupID string
}

func (q *Queries) CreateUserGroupMembership(ctx context.Context, arg CreateUserGroupMembershipParams) error {
	_, err := q.db.ExecContext(ctx, createUserGroupMembership, arg.UserID, arg.GroupID)
	return err
}

const getUserGroupMemberships = `-- name: GetUserGroupMemberships :many
SELECT
    user_id,
    group_id
FROM scim_user_group_memberships
WHERE user_id = ?1
ORDER BY group_id
`

func (q *Queries) GetUserGroupMemberships(ctx context.Context, userID string) ([]ScimUserGroupMembership, error) {
	rows, err := q.db.QueryContext(ctx, getUserGroupMemberships, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ScimUserGroupMembership{}
	for rows.Next() {
		var i ScimUserGroupMembership
		if err := rows.Scan(&i.UserID, &i.GroupID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
