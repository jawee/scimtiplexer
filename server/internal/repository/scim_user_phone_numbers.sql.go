// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: scim_user_phone_numbers.sql

package repository

import (
	"context"
	"database/sql"
)

const createUserPhoneNumber = `-- name: CreateUserPhoneNumber :exec
INSERT INTO scim_user_phone_numbers (
    id,
    user_id,
    value,
    display,
    type,
    primary_phone_number
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5,
    ?6
    ) ON CONFLICT (user_id, value) DO NOTHING
`

type CreateUserPhoneNumberParams struct {
	ID                 string
	UserID             string
	Value              string
	Display            sql.NullString
	Type               sql.NullString
	PrimaryPhoneNumber sql.NullBool
}

func (q *Queries) CreateUserPhoneNumber(ctx context.Context, arg CreateUserPhoneNumberParams) error {
	_, err := q.db.ExecContext(ctx, createUserPhoneNumber,
		arg.ID,
		arg.UserID,
		arg.Value,
		arg.Display,
		arg.Type,
		arg.PrimaryPhoneNumber,
	)
	return err
}

const getUserPhoneNumbers = `-- name: GetUserPhoneNumbers :many
SELECT id, user_id, value, display, type, primary_phone_number FROM scim_user_phone_numbers
WHERE user_id = ?1
ORDER BY value
`

func (q *Queries) GetUserPhoneNumbers(ctx context.Context, userID string) ([]ScimUserPhoneNumber, error) {
	rows, err := q.db.QueryContext(ctx, getUserPhoneNumbers, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ScimUserPhoneNumber{}
	for rows.Next() {
		var i ScimUserPhoneNumber
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Value,
			&i.Display,
			&i.Type,
			&i.PrimaryPhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
