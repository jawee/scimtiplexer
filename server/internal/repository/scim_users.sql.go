// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: scim_users.sql

package repository

import (
	"context"
	"database/sql"
)

const createScimUser = `-- name: CreateScimUser :one
INSERT INTO scim_users (
    id,
    external_id,
    user_name,
    display_name,
    nick_name,
    profile_url,
    title,
    user_type,
    preferred_language,
    locale,
    timezone,
    active,
    password,
    meta_resource_type,
    meta_created,
    meta_last_modified,
    meta_version,
    name_formatted,
    name_family_name,
    name_given_name,
    name_middle_name,
    name_honorific_prefix,
    name_honorific_suffix,
    employee_number,
    organization,
    department,
    division,
    cost_center,
    manager_id,
    organisation_id
) VALUES (
    ?1,
    ?2,
    ?3,
    ?4,
    ?5,
    ?6,
    ?7,
    ?8,
    ?9,
    ?10,
    ?11,
    ?12,
    ?13,
    ?14,
    ?15,
    ?16,
    ?17,
    ?18,
    ?19,
    ?20,
    ?21,
    ?22,
    ?23,
    ?24,
    ?25,
    ?26,
    ?27,
    ?28,
    ?29,
    ?30
) RETURNING id
`

type CreateScimUserParams struct {
	ID                  string
	ExternalID          sql.NullString
	UserName            string
	DisplayName         sql.NullString
	NickName            sql.NullString
	ProfileUrl          sql.NullString
	Title               sql.NullString
	UserType            sql.NullString
	PreferredLanguage   sql.NullString
	Locale              sql.NullString
	Timezone            sql.NullString
	Active              bool
	Password            sql.NullString
	MetaResourceType    string
	MetaCreated         string
	MetaLastModified    string
	MetaVersion         sql.NullString
	NameFormatted       sql.NullString
	NameFamilyName      sql.NullString
	NameGivenName       sql.NullString
	NameMiddleName      sql.NullString
	NameHonorificPrefix sql.NullString
	NameHonorificSuffix sql.NullString
	EmployeeNumber      sql.NullString
	Organization        sql.NullString
	Department          sql.NullString
	Division            sql.NullString
	CostCenter          sql.NullString
	ManagerID           sql.NullString
	OrganisationID      string
}

func (q *Queries) CreateScimUser(ctx context.Context, arg CreateScimUserParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createScimUser,
		arg.ID,
		arg.ExternalID,
		arg.UserName,
		arg.DisplayName,
		arg.NickName,
		arg.ProfileUrl,
		arg.Title,
		arg.UserType,
		arg.PreferredLanguage,
		arg.Locale,
		arg.Timezone,
		arg.Active,
		arg.Password,
		arg.MetaResourceType,
		arg.MetaCreated,
		arg.MetaLastModified,
		arg.MetaVersion,
		arg.NameFormatted,
		arg.NameFamilyName,
		arg.NameGivenName,
		arg.NameMiddleName,
		arg.NameHonorificPrefix,
		arg.NameHonorificSuffix,
		arg.EmployeeNumber,
		arg.Organization,
		arg.Department,
		arg.Division,
		arg.CostCenter,
		arg.ManagerID,
		arg.OrganisationID,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getAllScimUsers = `-- name: GetAllScimUsers :many
SELECT id, external_id, user_name, display_name, nick_name, profile_url, title, user_type, preferred_language, locale, timezone, active, password, meta_resource_type, meta_created, meta_last_modified, meta_version, name_formatted, name_family_name, name_given_name, name_middle_name, name_honorific_prefix, name_honorific_suffix, employee_number, organization, department, division, cost_center, manager_id, organisation_id FROM scim_users
WHERE organisation_id = ?1
ORDER BY id
`

func (q *Queries) GetAllScimUsers(ctx context.Context, organisationid string) ([]ScimUser, error) {
	rows, err := q.db.QueryContext(ctx, getAllScimUsers, organisationid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ScimUser{}
	for rows.Next() {
		var i ScimUser
		if err := rows.Scan(
			&i.ID,
			&i.ExternalID,
			&i.UserName,
			&i.DisplayName,
			&i.NickName,
			&i.ProfileUrl,
			&i.Title,
			&i.UserType,
			&i.PreferredLanguage,
			&i.Locale,
			&i.Timezone,
			&i.Active,
			&i.Password,
			&i.MetaResourceType,
			&i.MetaCreated,
			&i.MetaLastModified,
			&i.MetaVersion,
			&i.NameFormatted,
			&i.NameFamilyName,
			&i.NameGivenName,
			&i.NameMiddleName,
			&i.NameHonorificPrefix,
			&i.NameHonorificSuffix,
			&i.EmployeeNumber,
			&i.Organization,
			&i.Department,
			&i.Division,
			&i.CostCenter,
			&i.ManagerID,
			&i.OrganisationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScimUserById = `-- name: GetScimUserById :one
SELECT id, external_id, user_name, display_name, nick_name, profile_url, title, user_type, preferred_language, locale, timezone, active, password, meta_resource_type, meta_created, meta_last_modified, meta_version, name_formatted, name_family_name, name_given_name, name_middle_name, name_honorific_prefix, name_honorific_suffix, employee_number, organization, department, division, cost_center, manager_id, organisation_id FROM scim_users
WHERE id = ?1
AND organisation_id = ?2
`

type GetScimUserByIdParams struct {
	ID             string
	Organisationid string
}

func (q *Queries) GetScimUserById(ctx context.Context, arg GetScimUserByIdParams) (ScimUser, error) {
	row := q.db.QueryRowContext(ctx, getScimUserById, arg.ID, arg.Organisationid)
	var i ScimUser
	err := row.Scan(
		&i.ID,
		&i.ExternalID,
		&i.UserName,
		&i.DisplayName,
		&i.NickName,
		&i.ProfileUrl,
		&i.Title,
		&i.UserType,
		&i.PreferredLanguage,
		&i.Locale,
		&i.Timezone,
		&i.Active,
		&i.Password,
		&i.MetaResourceType,
		&i.MetaCreated,
		&i.MetaLastModified,
		&i.MetaVersion,
		&i.NameFormatted,
		&i.NameFamilyName,
		&i.NameGivenName,
		&i.NameMiddleName,
		&i.NameHonorificPrefix,
		&i.NameHonorificSuffix,
		&i.EmployeeNumber,
		&i.Organization,
		&i.Department,
		&i.Division,
		&i.CostCenter,
		&i.ManagerID,
		&i.OrganisationID,
	)
	return i, err
}
