// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package repository

import (
	"context"
	"database/sql"
	"time"
)

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, username, email, password, created_by, created_on_utc, modified_on_utc, modified_by FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.CreatedBy,
			&i.CreatedOnUtc,
			&i.ModifiedOnUtc,
			&i.ModifiedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const registerUser = `-- name: RegisterUser :one
INSERT INTO users (id, username, email, password, created_by, created_on_utc, modified_on_utc, modified_by)
VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8)
RETURNING id
`

type RegisterUserParams struct {
	ID            string
	Username      string
	Email         string
	Password      string
	Createdby     sql.NullString
	Createdonutc  time.Time
	Modifiedonutc time.Time
	Modifiedby    sql.NullString
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) (string, error) {
	row := q.db.QueryRowContext(ctx, registerUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Createdby,
		arg.Createdonutc,
		arg.Modifiedonutc,
		arg.Modifiedby,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
